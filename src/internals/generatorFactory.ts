import type { UserScriptMeta } from "index";
import type { Maybe } from "./common/types";
import { Generator, generate } from "./generator";
import type { ResourceDescriptor } from "./userScriptMeta";

/**
 * Represents the comment style generated by a generator.
 */
export enum CommentStyle {
  /**
   * No comment generated, lines provided as is.
   */
  None = "none",

  /**
   * Uses block-style comment.
   *
   * @example
   * "/* This is a block comment *\/"
   * // (final slash is escaped only in example)
   */
  Block = "block",

  /**
   * Ueses slash-style comment.
   *
   * @example
   * "// This is a slash comment."
   */
  Slashes = "slashes",
}

/**
 * Represents generation options.
 */
export interface GeneratorOptions {
  /**
   * Custom resource URL resolver.
   *
   * If resource has no `url` property set, then this resolver is called.
   *
   * @param descriptor Descriptor of the resource to resolve.
   * @returns URL to the resource or nullable value if URL can't be resolved.
   */
  resolveResourceUrl(descriptor: ResourceDescriptor): Maybe<string>;

  /**
   * Custom resource source resolver URL.
   *
   * If resource has no `src` property set, then this resolver is called.
   *
   * @param descriptor Descriptor of the resource to resolve.
   * @returns
   * Path to the resource source file or nullable value if resource cannot be
   * resolved.
   */
  resolveResourceSrc(descriptor: ResourceDescriptor): Maybe<string>;

  /**
   * Style of generated comments.
   *
   * @default "slashes"
   */
  commentStyle: CommentStyle;

  /**
   * Whether to include UserScript block start and end lines.
   *
   * @default true
   */
  includeBlock: boolean;
}

type PartialMaybe<Type, TypeKeys extends keyof Type = keyof Type> = {
  [Key in TypeKeys]?: Maybe<Type[Key]>;
};

export type GeneratorOptionsInput = Maybe<PartialMaybe<GeneratorOptions>>;

export const generatorDefaults = Object.freeze({
  commentStyle: CommentStyle.Slashes,
  includeBlock: true,
} as const);

export function populateDefaultOptions(opts?: GeneratorOptionsInput) {
  return {
    ...generatorDefaults,
    ...opts,
  };
}

export type PopulatedGeneratorOptions = ReturnType<
  typeof populateDefaultOptions
>;

/**
 * Creates a new generator function using providde generator options.
 *
 * @param opts Optional generator options, all properties are optional too.
 * @returns Generator function.
 */
export function createGenerator(opts?: GeneratorOptionsInput): Generator {
  const finalOpts = populateDefaultOptions(opts);

  return (meta: UserScriptMeta) => generate(meta, finalOpts);
}
